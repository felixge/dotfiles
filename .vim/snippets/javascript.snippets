snippet u
	var Util = require('util');
snippet e
	var EventEmitter = require('events').EventEmitter;
snippet s
	var self = this;
snippet v
	var ${1:variable} = ${2:value};
snippet ve
	var errParam = new Error('oh oh');
snippet cs
	var cbDelegate;
	var cbParam = function() {
		return cbDelegate.apply(this, arguments);
	};
snippet cd
	cbDelegate = gently.expect(function ${1:callback}Cb(${2}) {
	${3}
	});
snippet gl
	var listeners = [${1:events}];
	gently.expect(${2:object}, 'on', listeners.length, function(event, fn) {
		assert.equal(event, listeners.shift());
		${3:emit}[event] = fn;
		return this;
	});
snippet ie
	if (err) {
		cb(err);
		return;
	}
snippet r
	var ${1:var} = require('${2:module}')${3};
snippet si
	setInterval(function() {
		${2}
	}, ${1:interval});
snippet cl
	module.exports = $1;
	function ${1:Class}() {
	}
snippet cc
	${1:Class}.create = function(properties) {
		var instance = new this();
		${2}
		return instance;
	};
snippet t
	test('${1:name}', {
		'${2:test}': function() {
			${3}
		},
	});
snippet tb
	test.before(function() {
	${1}
	});
snippet ta
	test.after(function() {
	${1}
	});
snippet ti
	(function test${1:SubMethod}() {
	${2}
	})();
snippet ge
	gently.expect(${1:object}, '${2:method}', function (${3}) {
	${4}
	});
snippet td
	test.describe('${1:method}', function (${2}) {
		${3}
	});
snippet te
	test.expectNext(${1:object}, ${2:method});
snippet p
	${1:Class}.prototype.${2:method} = function(${3}) {
	${4}
	};
snippet cm
	${1:Class}.${2:method} = function(${3}) {
	${4}
	};
snippet f
	function(${1}) {
	${2}
	}
snippet ae
	assert.equal(${1:val}, ${2:expected});
snippet as
	assert.strictEqual(${1:val}, ${2:expected});
snippet ad
	assert.deepEqual(${1:val}, ${2:expected});
snippet ao
	assert.ok(${1:val});
snippet at
	assert.throws(function() {
		${1}
	});
snippet if
	if (${1:condition}) {
	${2}
	}
snippet fi
	for (var ${1:i} = 0; $1 < ${2:array}.length; $1++) {
		var ${3:item} = $2[$1];
		${4}
	}
snippet fk
	for (var ${1:key} in ${2:object}) {
		var ${3:value} = $2[$1];
		${4}
	}
snippet c
	console.log(${1:var});
snippet ce
	console.error(${1:var});
